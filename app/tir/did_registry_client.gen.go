// Package tir2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package tir

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// DIDDocument defines model for DIDDocument.
type DIDDocument struct {
	// Context Context used for describing the document
	Context            []string                               `json:"@context"`
	Id                 string                                 `json:"id"`
	VerificationMethod *[]DIDDocument_VerificationMethod_Item `json:"verificationMethod,omitempty"`
}

// DIDDocument_VerificationMethod_Item defines model for DIDDocument.verificationMethod.Item.
type DIDDocument_VerificationMethod_Item struct {
	union json.RawMessage
}

// JWK defines model for JWK.
type JWK struct {
	Alg *string   `json:"alg,omitempty"`
	E   *string   `json:"e,omitempty"`
	Kid *string   `json:"kid,omitempty"`
	Kty *string   `json:"kty,omitempty"`
	N   *string   `json:"n,omitempty"`
	Use *string   `json:"use,omitempty"`
	X5c *[]string `json:"x5c,omitempty"`
	X5u *string   `json:"x5u,omitempty"`
}

// JsonWebKey2020VerificationMethod defines model for JsonWebKey2020VerificationMethod.
type JsonWebKey2020VerificationMethod struct {
	Controller   *string `json:"controller,omitempty"`
	Id           *string `json:"id,omitempty"`
	PublicKeyJwk *JWK    `json:"publicKeyJwk,omitempty"`
	Type         *string `json:"type,omitempty"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// Detail A human readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code generated by the origin server for this occurrence of the problem.
	Status *float32 `json:"status,omitempty"`

	// Title A short summary of the problem type.
	Title *string `json:"title,omitempty"`

	// Type An absolute URI that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type.
	Type *string `json:"type,omitempty"`
}

// RsaVerificationKey2018VerificationMethod defines model for RsaVerificationKey2018VerificationMethod.
type RsaVerificationKey2018VerificationMethod struct {
	Controller   *string `json:"controller,omitempty"`
	Id           *string `json:"id,omitempty"`
	PublicKeyJwk *JWK    `json:"publicKeyJwk,omitempty"`
	Type         *string `json:"type,omitempty"`
}

// VerificationMethod defines model for VerificationMethod.
type VerificationMethod struct {
	Id   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Did defines model for Did.
type Did = string

// ValidAt defines model for ValidAt.
type ValidAt = openapi_types.Date

// GetDIDDocumentParams defines parameters for GetDIDDocument.
type GetDIDDocumentParams struct {
	// ValidAt This option is used to get a the version in the past of a DID document. It must be a date in ISO-8601 format
	ValidAt *ValidAt `form:"valid-at,omitempty" json:"valid-at,omitempty"`
}

// AsJsonWebKey2020VerificationMethod returns the union data inside the DIDDocument_VerificationMethod_Item as a JsonWebKey2020VerificationMethod
func (t DIDDocument_VerificationMethod_Item) AsJsonWebKey2020VerificationMethod() (JsonWebKey2020VerificationMethod, error) {
	var body JsonWebKey2020VerificationMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJsonWebKey2020VerificationMethod overwrites any union data inside the DIDDocument_VerificationMethod_Item as the provided JsonWebKey2020VerificationMethod
func (t *DIDDocument_VerificationMethod_Item) FromJsonWebKey2020VerificationMethod(v JsonWebKey2020VerificationMethod) error {
	v.Type = toPointer("JsonWebKey2020")
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func toPointer(in string) *string{
	return &in
}

// MergeJsonWebKey2020VerificationMethod performs a merge with any union data inside the DIDDocument_VerificationMethod_Item, using the provided JsonWebKey2020VerificationMethod
func (t *DIDDocument_VerificationMethod_Item) MergeJsonWebKey2020VerificationMethod(v JsonWebKey2020VerificationMethod) error {
	v.Type = toPointer("JsonWebKey2020")
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsRsaVerificationKey2018VerificationMethod returns the union data inside the DIDDocument_VerificationMethod_Item as a RsaVerificationKey2018VerificationMethod
func (t DIDDocument_VerificationMethod_Item) AsRsaVerificationKey2018VerificationMethod() (RsaVerificationKey2018VerificationMethod, error) {
	var body RsaVerificationKey2018VerificationMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRsaVerificationKey2018VerificationMethod overwrites any union data inside the DIDDocument_VerificationMethod_Item as the provided RsaVerificationKey2018VerificationMethod
func (t *DIDDocument_VerificationMethod_Item) FromRsaVerificationKey2018VerificationMethod(v RsaVerificationKey2018VerificationMethod) error {
	v.Type = toPointer("RsaVerificationKey2018")
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRsaVerificationKey2018VerificationMethod performs a merge with any union data inside the DIDDocument_VerificationMethod_Item, using the provided RsaVerificationKey2018VerificationMethod
func (t *DIDDocument_VerificationMethod_Item) MergeRsaVerificationKey2018VerificationMethod(v RsaVerificationKey2018VerificationMethod) error {
	v.Type = toPointer("RsaVerificationKey2018")
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DIDDocument_VerificationMethod_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t DIDDocument_VerificationMethod_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "JsonWebKey2020":
		return t.AsJsonWebKey2020VerificationMethod()
	case "RsaVerificationKey2018":
		return t.AsRsaVerificationKey2018VerificationMethod()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t DIDDocument_VerificationMethod_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DIDDocument_VerificationMethod_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDIDDocument request
	GetDIDDocument(ctx context.Context, did Did, params *GetDIDDocumentParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDIDDocument(ctx context.Context, did Did, params *GetDIDDocumentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDIDDocumentRequest(c.Server, did, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDIDDocumentRequest generates requests for GetDIDDocument
func NewGetDIDDocumentRequest(server string, did Did, params *GetDIDDocumentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v4/identifiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ValidAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "valid-at", runtime.ParamLocationQuery, *params.ValidAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDIDDocument request
	GetDIDDocumentWithResponse(ctx context.Context, did Did, params *GetDIDDocumentParams, reqEditors ...RequestEditorFn) (*GetDIDDocumentResponse, error)
}

type GetDIDDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DIDDocument
	JSON400      *ProblemDetails
	JSON404      *ProblemDetails
	JSON500      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetDIDDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDIDDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDIDDocumentWithResponse request returning *GetDIDDocumentResponse
func (c *ClientWithResponses) GetDIDDocumentWithResponse(ctx context.Context, did Did, params *GetDIDDocumentParams, reqEditors ...RequestEditorFn) (*GetDIDDocumentResponse, error) {
	rsp, err := c.GetDIDDocument(ctx, did, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDIDDocumentResponse(rsp)
}

// ParseGetDIDDocumentResponse parses an HTTP response from a GetDIDDocumentWithResponse call
func ParseGetDIDDocumentResponse(rsp *http.Response) (*GetDIDDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDIDDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DIDDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
